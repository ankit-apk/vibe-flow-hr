#!/bin/bash

# Check if ngrok is installed
if ! command -v ngrok &> /dev/null; then
    echo "ngrok is not installed. Please install it from https://ngrok.com/download"
    exit 1
fi

# Start docker-compose services in detached mode
echo "Starting Docker services..."
docker-compose up -d

# Give services a moment to start
echo "Waiting for services to start..."
sleep 5

# Start ngrok to expose port 80
echo "Starting ngrok tunnel to port 80..."
ngrok http 80 --log=stdout > /dev/null 2>&1 &
NGROK_PID=$!

# Extract and show the ngrok URL - this might take a few seconds to appear
echo "Waiting for ngrok URL..."
sleep 3

# Get public URL from ngrok
ngrok_url=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*' | grep -o 'https://[^"]*')

if [ -z "$ngrok_url" ]; then
    echo "Couldn't get ngrok URL. Please check the ngrok dashboard at http://localhost:4040"
else
    echo "======================================================"
    echo "ðŸš€ Your app is now available at: $ngrok_url"
    echo "ðŸ”— Frontend: $ngrok_url"
    echo "ðŸ”Œ API: $ngrok_url/api"
    echo "======================================================"
    
    # Ask if user wants to update .env.local with ngrok URL
    read -p "Would you like to update .env.local with the ngrok URL? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Create or update .env.local
        echo "# Auto-generated by ngrok-setup.sh" > .env.local
        echo "VITE_API_URL=${ngrok_url}/api" >> .env.local
        echo "âœ… Environment updated with ngrok URL"
        echo "Frontend will use API at: ${ngrok_url}/api"
        echo "If your frontend is already running, restart it to apply changes"
    fi
fi

echo ""
echo "Press Ctrl+C to shut down the services"
echo ""

# Keep the script running to keep ngrok running
# When the user presses Ctrl+C, we'll clean up
trap 'echo "Shutting down services..."; docker-compose down; kill $NGROK_PID; echo "Services stopped."' INT
wait 